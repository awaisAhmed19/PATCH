import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";
import { Download, FileText, Calendar, TrendingUp } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface VulnerabilityChartsProps {
  scanComplete: boolean;
}

export const VulnerabilityCharts = ({ scanComplete }: VulnerabilityChartsProps) => {
  const { toast } = useToast();

  const severityData = [
    { name: "Critical", value: 2, color: "#ef4444" },
    { name: "High", value: 3, color: "#f97316" },
    { name: "Medium", value: 4, color: "#eab308" },
    { name: "Low", value: 3, color: "#3b82f6" },
  ];

  const timelineData = [
    { month: "Jan", vulnerabilities: 15 },
    { month: "Feb", vulnerabilities: 12 },
    { month: "Mar", vulnerabilities: 18 },
    { month: "Apr", vulnerabilities: 8 },
    { month: "May", vulnerabilities: 14 },
    { month: "Jun", vulnerabilities: 12 },
  ];

  const handleExportCSV = () => {
    const csvContent = [
      "Severity,Count,Description",
      "Critical,2,SQL Injection and Authentication Bypass",
      "High,3,XSS and Insecure Configuration",
      "Medium,4,Missing Security Headers",
      "Low,3,Outdated Dependencies"
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerability-report.csv';
    a.click();
    
    toast({
      title: "CSV Export Complete",
      description: "Vulnerability report downloaded successfully",
    });
  };

  const handleExportPDF = () => {
    // In a real app, you'd use a library like jsPDF
    toast({
      title: "PDF Export",
      description: "PDF generation would be implemented with jsPDF library",
    });
  };

  if (!scanComplete) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="grid grid-cols-1 lg:grid-cols-2 gap-6"
      >
        <Card className="bg-gradient-card border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-muted-foreground" />
              Vulnerability Distribution
            </CardTitle>
          </CardHeader>
          <CardContent className="flex items-center justify-center h-64">
            <div className="text-center">
              <Calendar className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">Complete a scan to view charts</p>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-card border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-muted-foreground" />
              Timeline Analysis
            </CardTitle>
          </CardHeader>
          <CardContent className="flex items-center justify-center h-64">
            <div className="text-center">
              <TrendingUp className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">Historical data will appear here</p>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Severity Distribution Chart */}
        <Card className="bg-gradient-card border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-primary" />
              Vulnerability Distribution by Severity
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={severityData}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={120}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {severityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: '6px'
                  }}
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Timeline Chart */}
        <Card className="bg-gradient-card border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-primary" />
              Vulnerabilities Over Time
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={timelineData}>
                <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                <XAxis dataKey="month" stroke="hsl(var(--foreground))" />
                <YAxis stroke="hsl(var(--foreground))" />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: '6px'
                  }}
                />
                <Bar dataKey="vulnerabilities" fill="hsl(var(--primary))" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Export Buttons */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
        className="flex flex-wrap gap-4 justify-center"
      >
        <Button
          variant="export"
          size="lg"
          onClick={handleExportCSV}
          className="min-w-48"
        >
          <Download className="h-5 w-5 mr-2" />
          Export as CSV
        </Button>
        <Button
          variant="export"
          size="lg"
          onClick={handleExportPDF}
          className="min-w-48"
        >
          <FileText className="h-5 w-5 mr-2" />
          Export as PDF
        </Button>
      </motion.div>

      {/* Summary Stats */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
        className="grid grid-cols-2 md:grid-cols-4 gap-4"
      >
        {severityData.map((item, index) => (
          <Card key={item.name} className="bg-gradient-card border-border/50">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold" style={{ color: item.color }}>
                {item.value}
              </div>
              <div className="text-sm text-muted-foreground">{item.name}</div>
            </CardContent>
          </Card>
        ))}
      </motion.div>
    </motion.div>
  );
};
